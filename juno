#!/bin/bash
###############################################################################################################################################
### Juno pipeline                                                                                                                     	    ### 
### Authors: Ernst Hamer, Alejandra Hernandez-Segura, Dennis Schmitz, Robert Verhagen, Diogo Borst, Tom van Wijk, Maaike van der Beld       ### 
### Organization: Rijksinstituut voor Volksgezondheid en Milieu (RIVM)                                                                      ### 
### Department: Infektieziekteonderzoek, Diagnostiek en Laboratorium Surveillance (IDS), Bacteriologie (BPD)                                ### 
### Date: 09-10-2020                                                                                                                        ### 
###                                                                                                                                         ### 
### Documentation: https://github.com/AleSR13/Juno_pipeline.git                                                                             ### 
###                                                                                                                                         ### 
###                                                                                                                                         ### 
### Snakemake rules (in order of execution):                                                                                                ### 
###     1 fastQC        # Asses quality of raw reads.                                                                                       ### 
###     2 trimmomatic   # Trim low quality reads and adapter sequences.                                                                     ### 
###     3 fastQC        # Asses quality of trimmed reads.                                                                                   ### 
###     4 spades        # Perform assembly with SPAdes.                                                                                     ### 
###     5 quast         # Run quality control tool QUAST on contigs/scaffolds.                                                              ### 
###     6 checkM        # Gives scores for completeness, contamination and strain heterogeneity (optional).                                 ### 
###     7 picard        # Determines library fragment lengths.                                                                              ### 
###     8 bbmap         # Generate scaffold alignment metrics.                                                                              ### 
###     9 multiQC       # Summarize analysis results and quality assessments in a single report                                             ### 
###                                                                                                                                         ###
###############################################################################################################################################

###############################################################################
#####                            Set-up                                   #####
###############################################################################

############################### Bash settings #################################

# Strict mode
set -eu

################### Generate ID, host and version info ########################

#set -o allexport
source bin/include/functions.sh
PIPELINE_NAME="Juno"
UNIQUE_ID=$(bin/include/generate_id.sh)
SET_HOSTNAME=$(bin/include/gethostname.sh)
VERSION=$(git log -n 1 --pretty=format:"%H")
eval "$(parse_yaml config/pipeline_parameters.yaml "params_")"
eval "$(parse_yaml config/config.yaml "configuration_")"
#set +o allexport

############################# Get names of environments #######################

PATH_MASTER_YAML="envs/master_env.yaml"
PATH_MAMBA_YAML="envs/mamba.yaml"
PATH_CHECKM_YAML="envs/checkm.yaml"
MASTER_NAME=$(head -n 1 ${PATH_MASTER_YAML} | cut -f2 -d ' ') 
MAMBA_NAME=$(head -n 1 ${PATH_MAMBA_YAML} | cut -f2 -d ' ') 
CHECKM_NAME=$(head -n 1 ${PATH_CHECKM_YAML} | cut -f2 -d ' ') 

###############################################################################
#####                  Parse arguments or set defaults                    #####
###############################################################################

################### Default values for pipeline ###############################
INPUT_DIR="raw_data"
OUTPUT_DIR="out"
GENUS_ALL="NotProvided"
METADATA="/data/BioGrid/NGSlab/BAC_in_house_NGS/In-house_NGS_selectie_2021.xlsx"
SKIP_CONFIRMATION="FALSE"
CORES="NotProvided"
QUEUE="bio"
CLEAN="FALSE"
HELP="FALSE"
HELP_GENERA="FALSE"
MAKE_SAMPLE_SHEET="FALSE"
SHEET_SUCCESS="FALSE"
CHECKM="TRUE"
UPDATE_GENUS="FALSE"
LOCAL="FALSE"

################### Parse the commandline arguments ###########################
# Unknown arguments are sent to Snakemake
POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        -i|--input)
        INPUT_DIR="${2%/}"
        shift 
        shift 
        ;;
        -o|--output)
        OUTPUT_DIR="${2%/}"
        shift 
        shift 
        ;;
        --genus)
        GENUS_ALL="$2"
        shift
        shift
        ;;
        -q|--queue)
        QUEUE="${2}"
        shift
        shift
        ;;
        --cores)
        CORES="${2}"
        shift
        shift
        ;;
        -l|--local)
        LOCAL="TRUE"
        shift
        ;;
        --metadata)
        METADATA="$2"
        shift
        shift
        ;;
        -h|--help)
        HELP="TRUE"
        shift 
        ;;
        --help-genera)
        UPDATE_GENUS="TRUE"
        HELP_GENERA="TRUE"
        shift 
        ;;
        -sh|--snakemake-help)
        SNAKEMAKE_HELP="TRUE"
        shift 
        ;;
        --clean)
        CLEAN="TRUE"
        shift 
        ;;
        --make-sample-sheet)
        MAKE_SAMPLE_SHEET="TRUE"
        shift 
        ;;
        --no-checkm)
        CHECKM="FALSE"
        UPDATE_GENUS="FALSE"
        shift 
        ;;
        -y)
        SKIP_CONFIRMATION="TRUE"
        shift
        ;;
        *) 
        POSITIONAL+=("$1") # Save in array
        shift 
        ;;
    esac
done
set -- "${POSITIONAL[@]:-}" 


###############################################################################
#####                           Juno help                                 #####
###############################################################################

if [ "${HELP:-}" == "TRUE" ]; then
    line
    bash bin/include/help.sh $PIPELINE_NAME $VERSION
    exit 0
fi

###############################################################################
#####                     Clean old output if necessary                   #####
###############################################################################

### Remove all output
if [ "${CLEAN:-}" == "TRUE" ]; then
    bash bin/include/Clean $OUTPUT_DIR
    exit 0
fi

###############################################################################
#####               Installation conda environments                       #####
###############################################################################

############## Check that necessary yaml files are present ####################
if [ ! -e "${PATH_MASTER_YAML}" ] || [ ! -e "${PATH_MAMBA_YAML}" ]; then
    line
    spacer
    echo -e "\nERROR:\n"
    echo "The necessary files to make the ${PIPELINE_NAME} master environment are missing"
    echo -e "(${PATH_MASTER_YAML} or ${PATH_MAMBA_YAML})\n"
    exit 1
fi

###################### Install mamba and master environments ##################

if [[ $PATH != *${MASTER_NAME}* ]]; then 
    set +eu
    if [[ $PATH != *${MAMBA_NAME}* ]]; then
        source activate ${MAMBA_NAME}
        if [ ! $? -eq 0 ]; then
            if [ "${SKIP_CONFIRMATION}" == "FALSE" ]; then
                spacer
                while read -r -p "The ${PIPELINE_NAME} master environment is not active yet, do you want to install/update it and activate it now? [y/n] " envanswer
       	        do
                    envanswer=${envanswer,,}
                    if [[ "${envanswer}" =~ ^(yes|y)$ ]]; then
                        break
                    elif [[ "${envanswer}" =~ ^(no|n)$ ]]; then
                        echo -e "The ${PIPELINE_NAME} master environment is a requirement. Exiting because cannot continue without this environment"
                        exit 1
                    else
                        echo -e "Please answer with 'yes' or 'no'"
                    fi
                done
            fi
            echo -e "\nUpdating mamba...\n"
            conda env update -f "${PATH_MAMBA_YAML}"
            source activate "${MAMBA_NAME}"
            mamba env update -f "${PATH_MASTER_YAML}"
        fi
        source activate "${MASTER_NAME}"
        if [ ! $? -eq 0 ]; then
            if [ "${SKIP_CONFIRMATION}" == "FALSE" ]; then
                spacer
                while read -r -p "The ${PIPELINE_NAME} master environment is not active yet, do you want to install/update it and activate it now? [y/n] " envanswer
       	        do
                    envanswer=${envanswer,,}
                    if [[ "${envanswer}" =~ ^(yes|y)$ ]]; then
                        break
                    elif [[ "${envanswer}" =~ ^(no|n)$ ]]; then
                        echo -e "The ${PIPELINE_NAME} master environment is a requirement. Exiting because cannot continue without this environment"
                        exit 1
                    else
                        echo -e "Please answer with 'yes' or 'no'"
                    fi
                done
            fi
            echo -e "\nInstalling master environment...\n"
            mamba env update -f "${PATH_MASTER_YAML}"
        fi
    fi  
    source activate "${MASTER_NAME}"
    set -eu
    echo -e "\nThe master environment has been activated\n" 
fi 



###############################################################################
#####                       Snakemake help                                #####
###############################################################################

if [ "${SNAKEMAKE_HELP:-}" == "TRUE" ]; then
    line
    snakemake --help
    exit 0
fi



###############################################################################
#####                     Check argument validity                         #####
###############################################################################
if [ ! -d "${INPUT_DIR}" ]; then
    minispacer
    echo -e "The input directory specified (${INPUT_DIR}) does not exist"
    echo -e "Please specify an existing input directory"
    minispacer
    exit 1
fi

if [[ ! $METADATA =~ xlsx$ ]]; then
    minispacer
    echo -e "The metadata file (${METADATA}) should have an xlsx extension."
    echo -e "Please provide a metadata file with the appropriate extension."
    minispacer
    exit 1
fi

###############################################################################
#####                      Get genus (taxon) list                         #####
###############################################################################
# Download and update genus list
if [ "${UPDATE_GENUS}" == "TRUE" ]; then
    printf "\nCollecting available genera from CheckM...\n"
    set +ue # Turn bash strict mode off because that breaks conda
    source activate mamba
    mamba env update -f ${PATH_CHECKM_YAML}
    source activate "${CHECKM_NAME}"
    checkm taxon_list > files/checkm_taxon_list.txt  
    source activate mamba
    source activate "${MASTER_NAME}"
    set -ue
fi

### Genus help if prompted
if [ "${HELP_GENERA:-}" == "TRUE" ]; then
    spacer
    GENERA=`grep genus files/checkm_taxon_list.txt | awk -F ' ' '{print $2}'`
    line
    echo -e "The genera that CheckM currently accepts are: "
    minispacer
    pr -4 -t -w 120 <<eof
$GENERA
eof
    exit 0
fi

###############################################################################
#####                      Make sample sheet                              #####
###############################################################################

if [  `ls -A "${INPUT_DIR}" | grep 'R[0-9]\{1\}.*\.f[ast]\{0,3\}q\.\?[gz]\{0,2\}$' | wc -l` -gt 0 ]; then
    minispacer
    echo -e "Files in input directory (${INPUT_DIR}) are present"
    echo -e "Generating sample sheet..."
    small_files=$(python bin/generate_sample_sheet.py "${INPUT_DIR}" 2>&1 1>/dev/null)
    python bin/generate_sample_sheet.py "${INPUT_DIR}" > sample_sheet.yaml
    if [ $(wc -l sample_sheet.yaml | awk '{ print $1 }') -gt 2 ]; then
        SHEET_SUCCESS="TRUE"
    fi
else
    minispacer
    echo -e "The input directory you specified (${INPUT_DIR}) exists but is empty or does not contain the expected input files..."
    echo -e "Please specify a directory with input-data."
    exit 1
fi

### Checker for succesfull creation of sample_sheet
if [ "${SHEET_SUCCESS}" == "TRUE" ]; then
    echo -e "Succesfully generated the sample sheet"
    echo -e "Ready to start"
else
    echo -e "Something went wrong while generating the sample sheet"
    echo -e "Make sure that ${INPUT_DIR} contains proper input data: "
    echo -e ".fastq, .fq, .fastq.gz, .fq.gz files containing the _R1 or _R2 tag within the file name."
    exit 1
fi


if [ "${MAKE_SAMPLE_SHEET}" == "TRUE" ]; then
    echo -e "Juno_run:\n    identifier: ${UNIQUE_ID}" > config/variables.yaml
    echo -e "Server_host:\n    hostname: http://${SET_HOSTNAME}" >> config/variables.yaml
    echo -e "The sample sheet and variables file has now been created, you can now run the snakefile manually"
    exit 0
fi

###############################################################################
#####                 Run Snakemake leaving audit trail                   #####
###############################################################################

LOG_ID_HOST="config/variables.yaml"
PARAMETERS="config/user_parameters.yaml"

__USERPARAMETERS="
pipeline_version: "${VERSION}"
out: "${OUTPUT_DIR}"
metadata: "$METADATA"
checkm: "$CHECKM"
genus: "$GENUS_ALL"
"
echo "$__USERPARAMETERS" > $PARAMETERS

if [ -e sample_sheet.yaml ]; then
    echo -e "Starting snakemake"
    echo -e "pipeline_run:\n   identifier: ${UNIQUE_ID}" > "$LOG_ID_HOST"
    echo -e "Server_host:\n    hostname: http://${SET_HOSTNAME}" >> "$LOG_ID_HOST"
    eval $(parse_yaml ${LOG_ID_HOST} "config_")
else
    echo -e "Sample_sheet.yaml could not be found"
    echo -e "This also means that the pipeline was unable to generate a new sample sheet for you"
    echo -e "Please inspect the input directory (${INPUT_DIR}) and make sure the right files are present"
    exit 1
fi

set +ue # Turn off bash strict mode to be able to use Snakemake + conda

if [[ $LOCAL == "TRUE" ]]; then
    if [[ $CORES == "NotProvided" ]]; then
        CORES="4"
    fi
    echo "cores: ${CORES}" >>$PARAMETERS
    snakemake --profile config --cores $CORES ${@}
    
    RESULT=$?
else
    if [[ $CORES == "NotProvided" ]]; then
        CORES="300"
    fi
    echo "cores: ${CORES}" >>$PARAMETERS
    echo "queue: ${QUEUE}" >> $PARAMETERS
    snakemake --profile config --cores $CORES \
    --drmaa " -q ${QUEUE} -n {threads} \
    -o ${OUTPUT_DIR}/log/drmaa/{name}_{wildcards}_{jobid}.out \
    -e ${OUTPUT_DIR}/log/drmaa/{name}_{wildcards}_{jobid}.err \
    -R \"span[hosts=1] rusage[mem={resources.mem_mb}]\" "  \
    --drmaa-log-dir ${OUTPUT_DIR}/log/drmaa ${@}
    
    RESULT=$?
fi

set -ue
echo -e "$small_files"

if [ "${RESULT}" == 0 ]; then
    echo -e "Juno run complete"
fi

exit ${RESULT}
